ết qu
ả cho c
ột hi
ện t
ại
results[[col]] <- list(
adf = adf_result,
kpss = kpss_result,
ts_used = ts_model,
arima = fit_arima,
arch = arch_test,
garch = garch_result
)
cat("-------------------------------------------------\n")
}
install.packages("rugarch")
library(rugarch)
# Cài đ
ặt và load gói c
ần thi
ết
library(readxl)
library(forecast)
library(tseries)
library(FinTS)
library(rugarch)
# Đ
ọc d
ữ li
ệu t
ừ file Excel
data <- read_excel("D:/Dethi/data_vnindex.xlsx")
# Chuy
ển đ
ổi c
ột ngày (gi
ả s
ử tên c
ột là 'Date') thành đ
ịnh d
ạng Date
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
# S
ắp x
ếp d
ữ li
ệu theo ngày và t
ạo đ
ối tư
ợng time series
data <- data[order(data$Date), ]
# Xác đ
ịnh các c
ột giá (lo
ại b
ỏ c
ột Date)
price_cols <- setdiff(names(data), "Date")
# Kh
ởi t
ạo danh sách lưu k
ết qu
ả
results <- list()
# L
ặp qua t
ừng c
ột giá
for (col in price_cols) {
cat("Đang x
ử lý c
ột:", col, "\n")
# T
ạo đ
ối tư
ợng chu
ỗi th
ời gian cho c
ột giá hi
ện t
ại.
# Ch
ỉnh s
ửa 'start' và 'frequency' cho phù h
ợp v
ới d
ữ li
ệu c
ủa b
ạn.
# (s
ố phiên giao d
ịch trung bình m
ỗi năm: lưu ý: 2024,2021:250, 2022,2023: 249)
ts_data <- ts(data[[col]], start = c(2020, 1), frequency = 250)
# V
ẽ bi
ểu đ
ồ đ
ể hình dung chu
ỗi (có th
ể b
ỏ qua n
ếu không c
ần)
plot(ts_data, main = paste("Bi
ểu đ
ồ chu
ỗi th
ời gian:", col))
# 3. Ki
ểm tra tính d
ừng c
ủa chu
ỗi
adf_result <- adf.test(ts_data)
kpss_result <- kpss.test(ts_data)
cat("ADF p-value:", adf_result$p.value, "\n")
cat("KPSS p-value:", kpss_result$p.value, "\n")
# N
ếu chu
ỗi không d
ừng (ví d
ụ: p-value c
ủa ADF >= 0.05) thì ti
ến hành l
ấy sai phân
if(adf_result$p.value > 0.05) {
cat("Chu
ỗi", col, "không d
ừng. Áp d
ụng l
ấy sai phân...\n")
ts_data_diff <- diff(ts_data)
# Ki
ểm tra l
ại sau khi l
ấy sai phân
adf_result_diff <- adf.test(ts_data_diff)
kpss_result_diff <- kpss.test(ts_data_diff)
cat("Sau khi l
ấy sai phân - ADF p-value:", adf_result_diff$p.value, "\n")
cat("Sau khi l
ấy sai phân - KPSS p-value:", kpss_result_diff$p.value, "\n")
# N
ếu sau khi l
ấy sai phân chu
ỗi đ
ạt d
ừng, dùng chu
ỗi đã đư
ợc l
ấy sai phân cho mô hình
if(adf_result_diff$p.value <= 0.05) {
ts_model <- ts_data_diff
} else {
cat("Chu
ỗi sau khi l
ấy sai phân v
ẫn chưa đ
ạt d
ừng, dùng chu
ỗi g
ốc.\n")
ts_model <- ts_data
}
} else {
cat("Chu
ỗi", col, "đã d
ừng.\n")
ts_model <- ts_data
}
# 4. Ư
ớc lư
ợng mô hình ARIMA v
ới chu
ỗi đã x
ử lý
fit_arima <- auto.arima(ts_model)
cat("K
ết qu
ả ARIMA cho", col, ":\n")
print(summary(fit_arima))
# 5. Ki
ểm tra hi
ệu
ứng ARCH trên ph
ần dư c
ủa mô hình ARIMA
arch_test <- ArchTest(residuals(fit_arima), lags = 12)
cat("ARCH Test p-value cho", col, ":", arch_test$p.value, "\n")
# N
ếu có hi
ệu
ứng ARCH (p-value < 0.05) thì ư
ớc lư
ợng mô hình GARCH
garch_result <- NULL
if(arch_test$p.value < 0.05) {
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "norm"
)
garch_fit <- ugarchfit(spec = spec, data = residuals(fit_arima))
garch_result <- garch_fit
cat("Mô hình GARCH đư
ợc ư
ớc lư
ợng cho", col, "\n")
} else {
cat("Không có hi
ệu
ứng ARCH đáng k
ể cho", col, "\n")
}
# Lưu k
ết qu
ả cho c
ột hi
ện t
ại
results[[col]] <- list(
adf = adf_result,
kpss = kpss_result,
ts_used = ts_model,
arima = fit_arima,
arch = arch_test,
garch = garch_result
)
cat("-------------------------------------------------\n")
}
View(ts_data)
# Cài đ
ặt và load gói c
ần thi
ết
library(readxl)
library(forecast)
library(tseries)
library(FinTS)
library(rugarch)
# Đ
ọc d
ữ li
ệu t
ừ file Excel
data <- read_excel("D:/Dethi/data_vnindex1.xlsx")
# Chuy
ển đ
ổi c
ột ngày (gi
ả s
ử tên c
ột là 'Date') thành đ
ịnh d
ạng Date
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
# S
ắp x
ếp d
ữ li
ệu theo ngày và t
ạo đ
ối tư
ợng time series
data <- data[order(data$Date), ]
# Xác đ
ịnh các c
ột giá (lo
ại b
ỏ c
ột Date)
price_cols <- setdiff(names(data), "Date")
# Kh
ởi t
ạo danh sách lưu k
ết qu
ả
results <- list()
# L
ặp qua t
ừng c
ột giá
for (col in price_cols) {
cat("Đang x
ử lý c
ột:", col, "\n")
# T
ạo đ
ối tư
ợng chu
ỗi th
ời gian cho c
ột giá hi
ện t
ại.
# Ch
ỉnh s
ửa 'start' và 'frequency' cho phù h
ợp v
ới d
ữ li
ệu c
ủa b
ạn.
# (s
ố phiên giao d
ịch trung bình m
ỗi năm: lưu ý: 2024,2021:250, 2022,2023: 249)
ts_data <- ts(data[[col]], start = c(2020, 1), frequency = 250)
# V
ẽ bi
ểu đ
ồ đ
ể hình dung chu
ỗi (có th
ể b
ỏ qua n
ếu không c
ần)
plot(ts_data, main = paste("Bi
ểu đ
ồ chu
ỗi th
ời gian:", col))
# 3. Ki
ểm tra tính d
ừng c
ủa chu
ỗi
adf_result <- adf.test(ts_data)
kpss_result <- kpss.test(ts_data)
cat("ADF p-value:", adf_result$p.value, "\n")
cat("KPSS p-value:", kpss_result$p.value, "\n")
# N
ếu chu
ỗi không d
ừng (ví d
ụ: p-value c
ủa ADF >= 0.05) thì ti
ến hành l
ấy sai phân
if(adf_result$p.value > 0.05) {
cat("Chu
ỗi", col, "không d
ừng. Áp d
ụng l
ấy sai phân...\n")
ts_data_diff <- diff(ts_data)
# Ki
ểm tra l
ại sau khi l
ấy sai phân
adf_result_diff <- adf.test(ts_data_diff)
kpss_result_diff <- kpss.test(ts_data_diff)
cat("Sau khi l
ấy sai phân - ADF p-value:", adf_result_diff$p.value, "\n")
cat("Sau khi l
ấy sai phân - KPSS p-value:", kpss_result_diff$p.value, "\n")
# N
ếu sau khi l
ấy sai phân chu
ỗi đ
ạt d
ừng, dùng chu
ỗi đã đư
ợc l
ấy sai phân cho mô hình
if(adf_result_diff$p.value <= 0.05) {
ts_model <- ts_data_diff
} else {
cat("Chu
ỗi sau khi l
ấy sai phân v
ẫn chưa đ
ạt d
ừng, dùng chu
ỗi g
ốc.\n")
ts_model <- ts_data
}
} else {
cat("Chu
ỗi", col, "đã d
ừng.\n")
ts_model <- ts_data
}
# 4. Ư
ớc lư
ợng mô hình ARIMA v
ới chu
ỗi đã x
ử lý
fit_arima <- auto.arima(ts_model)
cat("K
ết qu
ả ARIMA cho", col, ":\n")
print(summary(fit_arima))
# 5. Ki
ểm tra hi
ệu
ứng ARCH trên ph
ần dư c
ủa mô hình ARIMA
arch_test <- ArchTest(residuals(fit_arima), lags = 12)
cat("ARCH Test p-value cho", col, ":", arch_test$p.value, "\n")
# N
ếu có hi
ệu
ứng ARCH (p-value < 0.05) thì ư
ớc lư
ợng mô hình GARCH
garch_result <- NULL
if(arch_test$p.value < 0.05) {
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "norm"
)
garch_fit <- ugarchfit(spec = spec, data = residuals(fit_arima))
garch_result <- garch_fit
cat("Mô hình GARCH đư
ợc ư
ớc lư
ợng cho", col, "\n")
} else {
cat("Không có hi
ệu
ứng ARCH đáng k
ể cho", col, "\n")
}
# Lưu k
ết qu
ả cho c
ột hi
ện t
ại
results[[col]] <- list(
adf = adf_result,
kpss = kpss_result,
ts_used = ts_model,
arima = fit_arima,
arch = arch_test,
garch = garch_result
)
cat("-------------------------------------------------\n")
}
View(results)
View(results$VNINDEX_CLOSE)
results[["HNX30_CLOSE"]]
q()
tf$config$list_physical_devices("GPU")
library(tensorflow)
tf$config$list_physical_devices("GPU")
> tf$config$list_physical_devices("GPU")
library(reticulate)
py_config()
tf$config$list_physical_devices("GPU")
cuda_is_available()
install.packages("torch") # nếu chưa cài
library(torch)
torch::install_torch()
cuda_is_available()
source("~/.active-rstudio-document")
setwd("~/GitHub/sfa-src2025-stock-index-prediction")
source("~/.active-rstudio-document")
###########################
# 1. Cài đặt và nạp các gói cần thiết
###########################
packages <- c("readxl", "xts", "zoo", "tseries", "rugarch", "forecast","Rlibeemd","torch","locfit")
installed <- rownames(installed.packages())
for (pkg in packages) {
if (!(pkg %in% installed)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
###########################
# 2. Đọc và xử lý dữ liệu
###########################
data <- read_excel("data_vnindex1.xlsx")
names(data) <- tolower(names(data))
data$date <- as.Date(data$date)
data <- data[order(data$date), ]
data_xts <- xts(data[, setdiff(names(data), "date")], order.by = data$date)
# Kiểm định tính dừng chuỗi log-return
log_return_train <- diff(log(training_data$vnindex_close))
source("~/.active-rstudio-document")
y_sub[11:30]
warnings()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(f1[11:30])
source("~/.active-rstudio-document")
traceback()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
head(res_sep)
res_sep[58:70]
res_sep[58:70,]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/GitHub/sfa-src2025-stock-index-prediction/dlwr-function.R")
traceback()
source("~/GitHub/sfa-src2025-stock-index-prediction/dlwr-function.R")
source("~/GitHub/sfa-src2025-stock-index-prediction/dlwr-function.R")
traceback()
source("~/GitHub/sfa-src2025-stock-index-prediction/dlwr-function.R")
source("~/GitHub/sfa-src2025-stock-index-prediction/dlwr-function.R")
